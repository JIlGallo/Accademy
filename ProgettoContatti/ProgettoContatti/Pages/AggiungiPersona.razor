@using ProgettoContatti.BL
@using System.ComponentModel.DataAnnotations
@using ProgettoContatti.DAL.Filtri
@using ProgettoContatti.ENTITY
@using ProgettoContatti.ENTITY.Enums
@using ProgettoContatti.Services
@inject IJSRuntime JSRuntime
@page "/aggiungiPersona"

<div class="container" style="font-family: Bahnschrift">
    <EditForm Model="@NuovaPersona" OnValidSubmit="@AggiuntaPersonaAvvenuta">
        <DataAnnotationsValidator />
        <div class="row">
            <div class="col-md-6">
                <h1 class="text-primary">Aggiungi una Persona</h1>
                <p class="text-muted">Compilare tutti i campi per aggiungere una persona al Database</p>
                <div class="content">
                    <div class="form-group row mb-3">
                        <label for="txtNome" class="col-sm-2 col-form-label text-right">Nome:</label>
                        <div class="col-sm-8">
                            <InputText id="txtNome" placeholder="Mario" class="form-control" @bind-Value="NuovaPersona.Nome"  />
                            <ValidationMessage For="@(() => NuovaPersona.Nome)" />
                        </div>
                    </div>
                    <div class="form-group row mb-3">
                        <label for="txtCognome" class="col-sm-2 col-form-label text-right">Cognome:</label>
                        <div class="col-sm-8">
                            <InputText id="txtCognome" placeholder="Rossi" class="form-control" @bind-Value="NuovaPersona.Cognome" />
                            <ValidationMessage For="@(() => NuovaPersona.Cognome)" />
                        </div>
                    </div>
                    <div class="form-group row mb-3">
                        <label for="txtDataNascita" class="col-sm-2 col-form-label text-right">Data di nascita:</label>
                        <div class="col-sm-8">
                            <InputDate id="txtDataNascita" class="form-control" @bind-Value="NuovaPersona.DataDiNascita"  />
                            <ValidationMessage For="@(() => NuovaPersona.DataDiNascita)" />
                        </div>
                    </div>
                    <div class="form-group row mb-3">
                        <label for="txtEta" class="col-sm-2 col-form-label text-right">Età:</label>
                        <div class="col-sm-8">
                            <InputNumber id="txtEta"  class="form-control" @bind-Value="NuovaPersona.Eta" />
                            <ValidationMessage For="@(() => NuovaPersona.Eta)" />
                        </div>
                    </div>
                    <div class="form-group row mb-3">
                        <label for="selectGenere" class="col-sm-2 col-form-label text-right">Genere:</label>
                        <div class="col-sm-8">
                            <select id="selectTipoContatto" class="form-control" @bind="NuovaPersona.IntGenere">
                                <option value="2">@Utility.GetDisplayName(EGenerePersona.Femmina)</option>
                                <option value="3">@Utility.GetDisplayName(EGenerePersona.NonDefinito)</option>
                                <option value="1">@Utility.GetDisplayName(EGenerePersona.Maschio)</option>
                            </select>
                            <ValidationMessage For="@(() => NuovaPersona.IntGenere)" />
                        </div>
                    </div>
                    <div class="text-center mb-4">
                        <button type="submit" class="btn btn-success" style="margin-left: 265px">Aggiungi Persona</button>
                    </div>
                </div>
            </div>

            <div class="col-md-6">
                <h1 class="text-primary">Aggiungi i contatti</h1>
                <p class="text-muted">Compilare tutti i campi per aggiungere i contatti</p>

                <div class="content">
                    <div class="form-group row mb-3">
                        <label for="selectTipoContatto" class="col-sm-3 col-form-label text-right" >Tipologia contatto:</label>
                        <div class="col-sm-8">
                            <select id="selectTipoContatto" class="form-control" @bind="@NuovoContatto.IntTipo">
                                <option value="1">@Utility.GetDisplayName(ETipoContatto.NumeroDiTelefono)</option>
                                <option value="2">@Utility.GetDisplayName(ETipoContatto.Indirizzo)</option>
                                <option value="3">@Utility.GetDisplayName(ETipoContatto.SitoWeb)</option>
                                <option value="4">@Utility.GetDisplayName(ETipoContatto.Email)</option>
                            </select>
                            <ValidationMessage For="@(() => NuovoContatto.IntTipo)" />
                        </div>
                    </div>
                    <div class="form-group row mb-3">
                        <label for="txtContatto" class="col-sm-3 col-form-label text-right ">Inserisci contatto:</label>
                        <div class="col-sm-8">
                            <InputText id="txtContatto" class="form-control" @bind-Value="@NuovoContatto.Descrizione" />
                            <ValidationMessage For="@(() => NuovoContatto.Descrizione)" />
                        </div>
                    </div>
                    <div class="text-center">
                        <button type="button" class="btn btn-primary" style="margin-left: 400px" @onclick="@AggiungiContatto">Crea Contatto</button>
                    </div>
                </div>
                @if (mostraAlert)
                {
                    <div class="alert alert-success mt-5" role="alert">
                        Persona creata con successo!
                    </div>
                }
            </div>
        </div>
    </EditForm>
</div>

<h2 class="text-primary mt-5 text-center" style="font-family: Bahnschrift">Lista dei contatti</h2>
<table class="styled-table" style="font-family: Bahnschrift">
    
    @if (NuovaPersona.Contatti != null)
    {
        <thead class="thead-dark">
            <tr>
                <th width="45%">Tipo</th>
                <th width="45%">Descrizione</th>
                <th width="45%">Azioni</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var contatto in NuovaPersona.Contatti)
            {
                <tr>
                    <td>@Utility.GetDisplayName(contatto.Tipo)</td>
                    <td>@contatto.Descrizione</td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => EliminaContatto(contatto)">Elimina</button>
                    </td>
                </tr>
            }
        </tbody>
    }
    else
    {
        <h4 style="margin-left: 675px; margin-top: 15px; margin-bottom: 15px"><b>Nessun contatto inserito</b></h4>
    }
</table>


@code {
    private Modal? modal;
    private int FiltroGenere = 0;
    @inject NavigationManager Navigation
    [Inject] DataProvider? DataProvider { get; set; }
    List<Persona> persone { get; set; } = new List<Persona>();
    List<Contatto> contatti { get; set; } = new List<Contatto>();
    protected PersonaFM Filtri = new PersonaFM();
    public Persona NuovaPersona { get; set; } = new Persona();
    public Contatto NuovoContatto { get; set; } = new Contatto();



    private bool mostraAlert = false;
    private string messaggioAlert = "";

    public void AggiungiContatto()
    {
        if (NuovaPersona.Contatti == null)
            NuovaPersona.Contatti = new();
        NuovaPersona.Contatti.Add(NuovoContatto);
        NuovoContatto = new ();
    }
    public void EliminaContatto(Contatto contatto)
    {
        if(NuovaPersona.Contatti != null)
    {   
            NuovaPersona.Contatti.Remove(contatto);

        }
    }

    public void Cerca()
    {
        if (FiltroGenere == 0)
            Filtri.Genere = null;
        else
            Filtri.Genere = (EGenerePersona)FiltroGenere;

        persone = DataProvider.GetPersone(Filtri);
    }

    private async Task AggiuntaPersonaAvvenuta()
    {
        bool confermato = await JSRuntime.InvokeAsync<bool>("confirm", "Sei sicuro di voler creare questa persona?");

        if (confermato)
        {
            try
            {
               var nuovoId = AddPersona(); // Cattura l'eventuale eccezione

                if (nuovoId != null) // Verifica se l'inserimento è avvenuto con successo
                {
                    mostraAlert = true;
                    messaggioAlert = "Persona creata con successo!";
                    NuovaPersona = new Persona(); // Reimposta il modello dopo l'inserimento
                }
                else
                {
                    mostraAlert = true;
                    messaggioAlert = "Errore durante la creazione della persona.";
                }
            }
            catch (Exception ex)
            {
                mostraAlert = true;
                messaggioAlert = $"Errore durante la creazione: {ex.Message}";
            }
        }
    }


    public async Task AddPersona()
    {
        bool ret = true;
        #region Validazioni

        if (string.IsNullOrEmpty(NuovaPersona.Nome))
            ret = false;
        if (string.IsNullOrEmpty(NuovaPersona.Cognome))
            ret = false;
        #endregion

        int nuovoId = DataProvider.AddPersona(NuovaPersona);
        await Task.Delay(1000);


    }


}
